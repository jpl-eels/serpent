# Integration and Noise
prior_noise:
  position: 0.001
  rotation: 0.001
  linear_velocity: 0.001
  accelerometer_bias: 1.0e-4
  gyroscope_bias: 1.0e-4
  barometer_bias: 1.0e-6

# IMU
imu:
  reference_frame: "NWU" # Options: NED (downwards gravity), NWU (upwards gravity)
  noise:
    integration: 1.0e-4
    integration_bias: 3.0e-3
    accelerometer_bias: 4.33e-03
    gyroscope_bias: 2.66e-05
    overwrite: true # These imu noise values will only be used if overwrite set to true
    accelerometer: 1.86e-03
    gyroscope: 1.87e-04

# Barometer
barometer:
  noise:
    barometer_bias: 1.0e-6
    overwrite: true # If true, the barometer variance will be overridden as the square of the barometer noise.
    barometer: 1.0e-2

# Motion Distortion Correction
mdc:
  translation: true
  rotation: true

# ISAM2 Optimisation
isam2:
  optimization: "GaussNewton"  # Options: GaussNewton, Dogleg
  gauss_newton_params:
    wildfire_threshold: 1.0e-3
  dogleg_params:
    initial_delta: 1.0
    wildfire_threshold: 1.0e-5
    trust_region_adaptation_mode: "SEARCH_EACH_ITERATION" # Options: SEARCH_EACH_ITERATION, ONE_STEP_PER_ITERATION
    verbose: false
  relinearize_threshold: 0.1
  relinearize_skip: 10
  enable_relinearization: true
  evaluate_nonlinear_error: false
  factorization: "CHOLESKY" # Options: CHOLESKY, QR
  cache_linearized_factors: true

# Optimisation
optimisation:
  factors:
    barometer: false
    imu: true
    registration: true
    stereo: false

# Registration Covariance
registration_covariance:
  method: "CENSI" # Options: CONSTANT, CENSI (default), LLS
  # Options (for method = <CENSI, LLS>): POINT_TO_POINT_LINEARISED, POINT_TO_POINT_NONLINEAR,
  #   POINT_TO_PLANE_LINEARISED (default), POINT_TO_PLANE_NONLINEAR
  model: "POINT_TO_PLANE_LINEARISED" 
  constant: # For method = <CONSTANT>
    rotation: 0.0174533  # 1 deg
    translation: 1.0e-2  # 1 cm
  point_covariance: # For method = <CENSI, LLS>
    method: "CONSTANT" # Options: CONSTANT (default), VOXEL_SIZE, RANGE, RANGE_BIAS
    constant: 0.05 # For method = <CONSTANT>,
    range_noise: 0.05 # For method = <RANGE, RANGE_BIAS>
    range_bias_noise: 0.02 # For method = <RANGE_BIAS>

# Registration
s2s:
  method: "fast_gicp"  # Options: icp, gicp, fast_gicp, fast_gicp_st (uses fast_gicp), fast_vgicp, ndt
  base:
    maximum_iterations: 30
    ransac_iterations: 0
    ransac_outlier_rejection_threshold: 0.05
    max_correspondence_distance: 0.5
    transformation_epsilon: 0.001           # Translation convergence threshold in distance units
    transformation_rotation_epsilon: 0.0001 # Rotation convergence threshold in cos(angle)
    euclidean_fitness_epsilon: 0.0001       # Mean of correspondence euclidean distances convergence threshold
  icp: # Uses base
    use_reciprocal_correspondences: false
  gicp: # Uses icp
    rotation_epsilon: 2.0e-3
    correspondence_randomness: 20
    maximum_optimizer_iterations: 10
    translation_gradient_tolerance: 1.0e-2  # PCL 1.11.0 onwards
    rotation_gradient_tolerance: 1.0e-2     # PCL 1.11.0 onwards
  lsq: # Uses base
    rotation_epsilon: 2.0e-3
    initial_lambda_factor: 1.0e-9
    debug_print: false
  fast_gicp: # Uses lsq
    num_threads: 8
    correspondence_randomness: 20
    regularization_method: "PLANE" # Options: NONE, MIN_EIG, NORMALIZED_MIN_EIG, PLANE, FROBENIUS
  fast_vgicp: # Uses fast_gicp
    resolution: 1.0
    voxel_accumulation_mode: "ADDITIVE" # Options: ADDITIVE, ADDITIVE_WEIGHTED, MULTIPLICATIVE
    neighbor_search_method: "DIRECT1" # Options: DIRECT27, DIRECT7, DIRECT1, (cuda only) DIRECT_RADIUS
  ndt: # Uses base (note default maximum_iterations for ndt is 35)
    resolution: 1.0
    step_size: 0.1
    outlier_ratio: 0.55
    
s2m:
  enabled: true
  method: "fast_gicp"  # Options: icp, gicp, fast_gicp, fast_gicp_st (uses fast_gicp), fast_vgicp, ndt
  base:
    maximum_iterations: 30
    ransac_iterations: 0
    ransac_outlier_rejection_threshold: 0.05
    max_correspondence_distance: 0.5
    transformation_epsilon: 0.001           # Translation convergence threshold in distance units
    transformation_rotation_epsilon: 0.0001 # Rotation convergence threshold in cos(angle)
    euclidean_fitness_epsilon: 0.0001       # Mean of correspondence euclidean distances convergence threshold
  icp: # Uses base
    use_reciprocal_correspondences: false
  gicp: # Uses icp
    rotation_epsilon: 2.0e-3
    correspondence_randomness: 20
    maximum_optimizer_iterations: 10
    translation_gradient_tolerance: 1.0e-2  # PCL 1.11.0 onwards
    rotation_gradient_tolerance: 1.0e-2     # PCL 1.11.0 onwards
  lsq: # Uses base
    rotation_epsilon: 2.0e-3
    initial_lambda_factor: 1.0e-9
    debug_print: false
  fast_gicp: # Uses lsq
    num_threads: 8
    correspondence_randomness: 20
    regularization_method: "PLANE" # Options: NONE, MIN_EIG, NORMALIZED_MIN_EIG, PLANE, FROBENIUS
  fast_vgicp: # Uses fast_gicp
    resolution: 1.0
    voxel_accumulation_mode: "ADDITIVE" # Options: ADDITIVE, ADDITIVE_WEIGHTED, MULTIPLICATIVE
    neighbor_search_method: "DIRECT1" # Options: DIRECT27, DIRECT7, DIRECT1, (cuda only) DIRECT_RADIUS
  ndt: # Uses base (note default maximum_iterations for ndt is 35)
    resolution: 1.0
    step_size: 0.1
    outlier_ratio: 0.55

# Map frame id
map_frame_id: "map"
    
# Mapping
mapping:
  frame_extraction_number: 10
  distance_threshold: 0.1                   # metres
  rotation_threshold: 0.05235987755982988   # radians

# Stereo Factors
stereo_factors:
  noise:
    left_x: 5.0
    right_x: 5.0
    y: 5.0
  robust:
    enabled: true
    type: "huber" # Options: cauchy, dcs, fair, geman_mcclure, huber, l2_with_dead_zone, null (no config), tukey, welsch
    cauchy:
      k: 0.1
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    dcs:
      c: 1.0
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    fair:
      c: 1.3998
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    geman_mcclure:
      c: 1.0
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    huber:
      k: 1.345
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    l2_with_dead_zone:
      k: 1.0
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    tukey:
      c: 4.6851
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
    welsch:
      c: 2.9846
      reweight_scheme: "BLOCK" # Options: BLOCK, SCALAR
  left_cam_frame: "camera"

# Stereo Tracking
stereo_tracking:
  only_graph_frames: true # If true and registration factors enabled, only process frames at registration timestamps.
  new_feature_dist_threshold: 5.0
  detector:
    type: "FAST" # Options: FAST, GFTT, ORB, SIFT (requires OpenCV >= 4.4.0)
    fast: &fast
      threshold: 25
      nonmax_suppression: true
      type: "TYPE_9_16" # Options: TYPE_5_8, TYPE_7_12, TYPE_9_16
    gftt: &gftt
      max_corners: 100
      quality_level: 0.01
      min_distance: 1.0
      block_size: 3
      use_harris_detector: false
      k: 0.04
    orb: &orb
      num_features: 500
      scale_factor: 1.2
      num_levels: 8
      edge_threshold: 31
      first_level: 0
      wta_k: 2
      score_type: "HARRIS_SCORE" # Options: HARRIS_SCORE, FAST_SCORE
      patch_size: 31
      fast_threshold: 20
    sift: &sift
      num_features: 100
      num_octave_layers: 3
      contrast_threshold: 0.04
      edge_threshold: 10.0
      sigma: 1.6
  stereo_match_filter:
    vertical_pixel_threshold: 5.0
  stereo_distance_filter:
    enabled: true
    max_distance: 15.0
    min_distance: 1.0
  sparse_optical_flow:
    type: "PyrLK" # Options: PyrLK (Pyramid Lucas-Kanade), TODO: RLOF
    pyrlk:
      win_size: [21, 21]
      max_level: 3
      term_criteria:
        type: "COUNT+EPS" # Options: COUNT, EPS, COUNT+EPS
        max_count: 30
        epsilon: 0.01
      flags: 0
      min_eig_threshold: 1.0e-4
  stereo_keypoint_matcher:
    cost_function: "SSD" # Options: SAD, SSD, ZMSAD, LSSAD, NNCC
    window_size:
      width: 7
      height: 7
    cost_threshold: 64.0
    vertical_pixel_threshold: 5.0
    matching_filter: "RATIO_TEST" # Options: UNIDIRECTIONAL, BIDIRECTIONAL, RATIO_TEST
    ratio: 0.1
